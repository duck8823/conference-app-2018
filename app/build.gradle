apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.oss.licenses.plugin'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'deploygate'

// Manifest version
def versionMajor = 0
def versionMinor = 1
def versionPatch = 0

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    dataBinding.enabled = true

    defaultConfig {
        applicationId "io.github.droidkaigi.confsched2018"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "$versionMajor.$versionMinor.$versionPatch"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        resConfigs "en", "ja"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    applicationVariants.all { variant ->
        variant.resValue "string", "versionInfo", variant.versionName
    }
    signingConfigs {
        debug {
            storeFile rootProject.file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            storeFile rootProject.file("release.keystore")
            storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
            keyAlias System.getenv("ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
        }
    }
    buildTypes {
        debug {
            manifestPlaceholders = [scheme: "conference", host: "droidkaigi.co.jp.debug"]
            resValue "string", "app_name", "DroidKaigi 2018 Dev"
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            versionNameSuffix "-debug"
        }
        release {
            manifestPlaceholders = [scheme: "conference", host: "droidkaigi.co.jp"]
            resValue "string", "app_name", "DroidKaigi 2018"
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            proguardFile getDefaultProguardFile('proguard-android.txt')
            // global proguard settings
            proguardFile file("proguard-rules.pro")
            // library proguard settings
            def files = rootProject.file("proguard")
                    .listFiles()
                    .findAll { it.name.startsWith("proguard") }
                    .toList()
                    .toArray()
            proguardFiles(files)
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    lintOptions {
        lintConfig file('lint.xml')
        textReport true
        textOutput 'stdout'
    }
}

kapt {
    useBuildCache = true
}

// See versions.gradle
dependencies {
    implementation project(':model')

    // Kotlin
    implementation depends.kotlin.stdlib

    //==================== Support Library ====================
    implementation depends.support.v4
    implementation depends.support.appcompat
    implementation depends.support.design
    implementation depends.support.cardview
    implementation depends.support.customtabs
    implementation depends.support.constraint
    implementation depends.support.multidex
    implementation depends.support.emoji
    implementation depends.support.preference

    //==================== Network ====================
    implementation depends.okhttp3.loggingIntercepter

    implementation depends.retrofit.core
    implementation depends.retrofit.converterMoshi
    implementation depends.retrofit.adapterRxJava2

    //==================== Structure ====================
    implementation depends.kotshi.api
    kapt depends.kotshi.compiler

    implementation depends.lifecycle.runtime
    implementation depends.lifecycle.extensions
    implementation depends.lifecycle.reactivestreams
    implementation depends.room.runtime
    implementation depends.room.rxjava2
    kapt depends.room.compiler

    implementation depends.rxjava2.core
    implementation depends.rxjava2.android
    implementation depends.rxjava2.kotlin

    kapt depends.binding.compiler

    implementation depends.dagger.core
    implementation depends.dagger.android
    implementation depends.dagger.androidSupport
    kapt depends.dagger.compiler
    kapt depends.dagger.androidProcessor

    implementation depends.firebase.firestore
    implementation depends.firebase.auth
    implementation depends.firebase.core

    implementation depends.threetenabp

    implementation depends.kotpref.kotpref
    implementation depends.kotpref.initializer

    //==================== UI ====================
    implementation depends.glide.core
    implementation depends.glide.okhttp3
    kapt depends.glide.compiler

    implementation depends.groupie.core
    implementation depends.groupie.binding

    implementation depends.downloadableCalligraphy
    implementation depends.gms

    //==================== Debug ====================
    debugImplementation depends.stetho.core
    debugImplementation depends.stetho.okhttp3

    implementation(depends.crashlytics) {
        transitive = true
    }

    implementation depends.timber

    debugImplementation depends.leakcanary

    debugImplementation depends.debot.core
    releaseImplementation depends.debot.noop

    //==================== Test ====================
    testImplementation depends.junit
    testImplementation depends.mockitoKotlin

    testImplementation depends.robolectric.core
    testImplementation depends.assertk

    testImplementation depends.threetenbp

    // LeakCanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'

    // Stetho
    def stethoVersion = '1.5.0'
    debugImplementation "com.facebook.stetho:stetho:$stethoVersion"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"

    // Test
    testImplementation 'junit:junit:4.12'
    testImplementation "com.nhaarman:mockito-kotlin:1.5.0"
    // Unit Test
    testImplementation "org.robolectric:robolectric:3.5.1"
    testImplementation 'com.willowtreeapps.assertk:assertk:0.9'
    // Instrumentation Test
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation depends.supporttest.runner
    androidTestImplementation depends.supporttest.espresso
}

repositories {
    mavenCentral()
}

ktlint {
    version = versions.ktlint
    android = true
    reporter = "checkstyle"
    ignoreFailures = true
}

apply plugin: 'com.google.gms.google-services'

deploygate {
    userName = "takahirom"
    token = System.getenv("DEPLOY_GATE_API_KEY")

    apks {
        release {
            def hash = 'git rev-parse --short HEAD'.execute([], project.rootDir).in.text.trim()
            message = "https://github.com/DroidKaigi/conference-app-2018/tree/${hash} ${System.getenv("CIRCLE_BUILD_URL")}"

            distributionKey = "aed2445665e27de6571227992d66ea489b6bdb44"
            releaseNote = "https://github.com/DroidKaigi/conference-app-2018/tree/${hash} ${System.getenv("CIRCLE_BUILD_URL")}"
        }
    }
}
